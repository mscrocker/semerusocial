<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<!-- ********************************************** -->
	<!-- ***************** PARENT POM ***************** -->
	<!-- ********************************************** -->

	<parent>
        <groupId>es.udc.fi.dc.fd</groupId>
        <artifactId>friendmatch</artifactId>
        <version>1.3-SNAPSHOT</version>
    </parent>

	<!-- ********************************************** -->
	<!-- **************** PROJECT INFO **************** -->
	<!-- ********************************************** -->

	<groupId>es.udc.fi.dc.fd</groupId>
    <artifactId>backend</artifactId>
    <packaging>war</packaging>


	<!-- ********************************************** -->
	<!-- ****************** PROFILES ****************** -->
	<!-- ********************************************** -->
	<profiles>
		<!-- ============================================== -->
		<!-- ============= DATABASE PROFILES ============== -->
		<!-- ============================================== -->
		<profile>
			<!-- H2 database profile -->
			<!-- Prepares the project to make use of an H2 in-memory database -->
			<id>h2</id>
			<activation>
				<!-- Active by default so it can be installed by CI -->
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<!-- Access data -->
				<!-- Default values for testing and development -->
				<!-- Override them for production -->
				<baseDataBaseUrl>jdbc:h2:mem:semerusocial</baseDataBaseUrl>
				<database.url>${baseDataBaseUrl}</database.url>
				<database.testUrl>${baseDataBaseUrl}_test?serverTimezone=UTC</database.testUrl>

				<database.url>jdbc:h2:mem:friendmatch</database.url>
				<database.username>sa</database.username>
				<database.password></database.password>
				<!-- Spring context -->
				<database.tag>h2</database.tag>
			</properties>
			<dependencies>
				<dependency>
					<!-- H2 database -->
					<groupId>com.h2database</groupId>
					<artifactId>h2</artifactId>
					<version>${h2.version}</version>
				</dependency>
			</dependencies>
		</profile>
		<profile>
			<!-- MySQL database profile -->
			<!-- Prepares the project to make use of a MySQL database -->
			<id>mysql</id>
			<properties>
				<!-- Access data -->
				<!-- Default values for testing and development -->
				<!-- Override them for production -->
				<baseDataBaseUrl>jdbc:mysql://localhost:3306/friendmatch</baseDataBaseUrl>
				<database.url>${baseDataBaseUrl}?serverTimezone=UTC</database.url>
				<database.testUrl>${baseDataBaseUrl}_test?serverTimezone=UTC</database.testUrl>


				<database.username>root</database.username>
				<database.password>root</database.password>
				<!-- Spring context -->
				<database.tag>mysql</database.tag>
			</properties>
			<dependencies>
				<dependency>
					<!-- MySQL connector -->
					<groupId>mysql</groupId>
					<artifactId>mysql-connector-java</artifactId>
					<version>${mysql.version}</version>

				</dependency>
			</dependencies>
		</profile>
		<profile>
			<!-- Postgres database profile -->
			<!-- Prepares the project to make use of a Postgres database -->
			<id>postgres</id>
			<properties>
				<!-- Access data -->
				<!-- Default values for testing and development -->
				<!-- Override them for production -->
				<baseDataBaseUrl>jdbc:postgresql://localhost:5432/friendmatch</baseDataBaseUrl>
				<database.url>${baseDataBaseUrl}?serverTimezone=UTC</database.url>
				<database.testUrl>${baseDataBaseUrl}_test?serverTimezone=UTC</database.testUrl>

				<database.username>postgres</database.username>
				<database.password></database.password>
				<!-- Spring context -->
				<database.tag>postgres</database.tag>
			</properties>
			<dependencies>
				<dependency>
					<!-- Postgres connector -->
					<groupId>org.postgresql</groupId>
					<artifactId>postgresql</artifactId>
					<version>${postgresql.version}</version>
				</dependency>
			</dependencies>
		</profile>
	</profiles>

	
	<!-- ********************************************** -->
	<!-- **************** PROPERTIES ****************** -->
	<!-- ********************************************** -->
	<properties>
		<!-- ============================================== -->
		<!-- =========== DEPENDENCIES VERSIONS ============ -->
		<!-- ============================================== -->
		<h2.version>1.4.197</h2.version>
        <hamcrest.version>2.0.0.0</hamcrest.version>
        <hibernate.version>5.2.17.Final</hibernate.version>
        <hikari.version>2.7.8</hikari.version>
        <jsonpath.version>2.4.0</jsonpath.version>
        <liquibase.version>3.5.5</liquibase.version>
        <log4j.version>2.9.1</log4j.version>
        <mockito.version>2.18.3</mockito.version>
        <mysql.version>8.0.12</mysql.version>
        <postgresql.version>42.1.4</postgresql.version>
        <slf4j.version>1.8.0-alpha2</slf4j.version>
        <spring.data.version>2.0.7.RELEASE</spring.data.version>
        <spring.version>5.0.6.RELEASE</spring.version>
        <spring.boot.security.version>1.4.1.RELEASE</spring.boot.security.version>
        <jsonwebtoken.version>0.9.0</jsonwebtoken.version>
        <javax.xml.version>2.3.0</javax.xml.version>
        <javassist.version>3.24.1-GA</javassist.version>
        <failsafe.version>3.0.0-M3</failsafe.version>
        
		<!-- ============================================== -->
		<!-- ============== PLUGINS VERSIONS ============== -->
		<!-- ============================================== -->
		<plugin.surefire.version>3.0.0-M3</plugin.surefire.version>
        <plugin.jacoco.version>0.8.4</plugin.jacoco.version>
        
	</properties>

	<!-- ********************************************** -->
	<!-- *************** DEPENDENCIES ***************** -->
	<!-- ********************************************** -->
	<dependencies>
		<!-- ============================================== -->
		<!-- ================== SPRING ==================== -->
		<!-- ============================================== -->
        <dependency>
            <!-- Spring Data JPA -->
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-jpa</artifactId>
            <version>${spring.data.version}</version>
        </dependency>
        <dependency>
            <!-- Spring OXM -->
            <groupId>org.springframework</groupId>
            <artifactId>spring-oxm</artifactId>
        </dependency>
        
        <!-- ============================================== -->
        <!-- ============ FOR SPRING SECURITY ============= -->
        <!-- ============================================== -->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
            <version>${spring.boot.security.version}</version>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt</artifactId>
            <version>${jsonwebtoken.version}</version>
        </dependency>
        
        <!-- ============================================== -->
        <!-- ================= WEB SOCKET ================= -->
        <!-- ============================================== -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-websocket</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-messaging</artifactId>
        </dependency>

		<!-- ============================================== -->
		<!-- ================ HIBERNATE =================== -->
		<!-- ============================================== -->
		<dependency>
			<!-- Hibernate Ehcache -->
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-ehcache</artifactId>
			<version>${hibernate.version}</version>
		</dependency>
		<dependency>
			<!-- Hikari CP -->
			<groupId>com.zaxxer</groupId>
			<artifactId>HikariCP</artifactId>
			<version>${hikari.version}</version>
		</dependency>

		<!-- ============================================== -->
		<!-- ================ LIQUIBASE =================== -->
		<!-- ============================================== -->
		<dependency>
			<!-- Liquibase -->
			<groupId>org.liquibase</groupId>
			<artifactId>liquibase-core</artifactId>
			<version>${liquibase.version}</version>
		</dependency>
		
		<!-- ============================================== -->
		<!-- ================== LOGGING =================== -->
		<!-- ============================================== -->
		<dependency>
			<!-- Log4j Commons Logging Bridge -->
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-jcl</artifactId>
			<version>${log4j.version}</version>
		</dependency>
		<dependency>
			<!-- Log4j SLF4J Bridge -->
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
			<version>${log4j.version}</version>
		</dependency>
		<dependency>
			<!-- Log4j Web -->
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-web</artifactId>
			<version>${log4j.version}</version>
		</dependency>
		<dependency>
			<!-- SL4J API -->
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>

		<!-- ============================================== -->
		<!-- ================= JACKSON ==================== -->
		<!-- ============================================== -->
		<dependency>
			<!-- Jackson annotations -->
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
		</dependency>
		<!-- ============================================== -->
		<!-- ============ OTHER DEPENDENCIES ============== -->
		<!-- ============================================== -->
		<dependency>
			<!-- Javax EL implementation -->
			<groupId>org.glassfish.web</groupId>
			<artifactId>el-impl</artifactId>
			<version>${glassfish.el}</version>
			<scope>provided</scope>
		</dependency>
        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
            <version>${javax.xml.version}</version>
        </dependency>
        <dependency>
            <groupId>org.javassist</groupId>
            <artifactId>javassist</artifactId>
            <version>${javassist.version}</version>
        </dependency>

		<!-- ============================================== -->
		<!-- =========== VERSION ENFORCEMENT ============== -->
		<!-- ============================================== -->

		<!-- ============================================== -->
		<!-- ======= TEST ENVIRONMENT DEPENDENCIES ======== -->
		<!-- ============================================== -->
		<dependency>
			<!-- Hamcrest -->
			<groupId>org.hamcrest</groupId>
			<artifactId>java-hamcrest</artifactId>
			<version>${hamcrest.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- JSON Path -->
			<groupId>com.jayway.jsonpath</groupId>
			<artifactId>json-path</artifactId>
			<version>${jsonpath.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- Mockito -->
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>${mockito.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<!-- ********************************************** -->
	<!-- ******************* BUILD ******************** -->
	<!-- ********************************************** -->

	<build>
	    <finalName>semerusocial-backend</finalName> 
		<defaultGoal>clean package</defaultGoal>
		<resources>
			<resource>
				<directory>src/main/resources/</directory>
			</resource>
			<resource>
				<!-- Main resources -->
				<directory>src/main/resources/</directory>
				<includes>
					<!-- Filter the application context -->
					<include>context/application-context.xml</include>
					<!-- Filter the persistence access properties -->
					<include>config/persistence-access.properties</include>
				</includes>
				<filtering>true</filtering>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
			</testResource>
		</testResources>
		<pluginManagement>
			<plugins>
				<!-- Plugin versions and configurations are enforced here. -->
				<!--integration -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<executions>
						<execution>
							<phase>test-compile</phase>
							<goals>
								<goal>testCompile</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<version>${failsafe.version}</version>
					<executions>
						<execution>
							<goals>
								<goal>integration-test</goal>
								<goal>verify</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
		
        <plugins>
			<plugin>
				<!-- Changes -->
				<!-- Takes care of the changes log -->
				<!-- It is set to also validate the changes log file -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-changes-plugin</artifactId>
				<executions>
					<!-- Changes plugin is bound to the pre-site phase -->
					<execution>
						<id>check-changes</id>
						<phase>pre-site</phase>
						<goals>
							<goal>changes-check</goal>
						</goals>
					</execution>
					<execution>
						<id>validate-changes</id>
						<phase>pre-site</phase>
						<goals>
							<goal>changes-validate</goal>
						</goals>
						<configuration>
							<failOnError>true</failOnError>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- Enforcer -->
				<!-- Stops the project from being built if it does not comply with a 
					set of rules. -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<executions>
					<!-- The enforce goal is bound to the validate phase -->
					<execution>
						<id>enforce-database</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<!-- A database should be set. -->
								<requireProperty>
									<property>database.tag</property>
									<message><![CDATA[Give a Spring database profile.]]></message>
								</requireProperty>
								<requireProperty>
									<property>database.url</property>
									<message><![CDATA[Give a URL for the database.]]></message>
								</requireProperty>
								<requireProperty>
									<property>database.username</property>
									<message><![CDATA[Give a username for the database.]]></message>
								</requireProperty>
								<requireProperty>
									<property>database.password</property>
									<message><![CDATA[Give a password for the database.]]></message>
								</requireProperty>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
			
			<plugin>
				<!-- WAR -->
				<!-- Generates the WAR package. -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<webResources>
						<resource>
							<!-- Persistence access data is filtered -->
							<filtering>true</filtering>
							<directory>${project.basedir}/src/main/resources/config</directory>
							<targetPath>WEB-INF/classes/config</targetPath>
							<includes>
								<include>persistence-access.properties</include>
							</includes>
						</resource>
					</webResources>
					<!-- Variables to to override will be delimited with a @. -->
					<!-- This avoids collisions with Spring variables. -->
					<!-- So instead of replacing ${project.name} Maven will replace @project.name@. -->
					<useDefaultDelimiters>true</useDefaultDelimiters>
				</configuration>
			</plugin>
			<plugin>
				<!-- Resources -->
				<!-- Handles the project resources. -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<configuration>
					<!-- Variables to to override will be delimited with a @. -->
					<!-- This avoids collisions with Spring variables. -->
					<!-- So instead of replacing ${project.name} Maven will replace @project.name@. -->
					<useDefaultDelimiters>true</useDefaultDelimiters>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<!-- ********************************************** -->
	<!-- ****************** REPORTS ******************* -->
	<!-- ********************************************** -->
</project>
